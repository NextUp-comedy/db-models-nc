"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportContentReportAssociation = exports.ContentReportWatchesAssociation = exports.Watches = exports.User = exports.UserRole = exports.Report = exports.ContentReport = exports.Content = exports.Settings = exports.sequelize = void 0;
const connections_1 = __importDefault(require("./connections"));
exports.sequelize = connections_1.default;
const models_1 = require("./models");
Object.defineProperty(exports, "Settings", { enumerable: true, get: function () { return models_1.Settings; } });
Object.defineProperty(exports, "Content", { enumerable: true, get: function () { return models_1.Content; } });
Object.defineProperty(exports, "ContentReport", { enumerable: true, get: function () { return models_1.ContentReport; } });
Object.defineProperty(exports, "Report", { enumerable: true, get: function () { return models_1.Report; } });
Object.defineProperty(exports, "UserRole", { enumerable: true, get: function () { return models_1.UserRole; } });
Object.defineProperty(exports, "User", { enumerable: true, get: function () { return models_1.User; } });
Object.defineProperty(exports, "Watches", { enumerable: true, get: function () { return models_1.Watches; } });
models_1.UserRole.hasMany(models_1.User);
models_1.User.belongsTo(models_1.UserRole, { as: 'userRole' });
models_1.User.hasMany(models_1.Content);
models_1.Content.belongsTo(models_1.User);
models_1.Content.hasMany(models_1.ContentReport, { as: 'contentReports' });
models_1.ContentReport.belongsTo(models_1.Content);
const ReportContentReportAssociation = models_1.Report.hasMany(models_1.ContentReport, { as: 'contentReports' });
exports.ReportContentReportAssociation = ReportContentReportAssociation;
models_1.ContentReport.belongsTo(models_1.Report);
models_1.Content.hasMany(models_1.Watches);
models_1.Watches.belongsTo(models_1.Content);
const ContentReportWatchesAssociation = models_1.ContentReport.hasMany(models_1.Watches);
exports.ContentReportWatchesAssociation = ContentReportWatchesAssociation;
models_1.Watches.belongsTo(models_1.ContentReport, { as: 'contentReports' });
models_1.User.hasMany(models_1.User, { foreignKey: 'createdBy' });
models_1.User.belongsTo(models_1.User, { foreignKey: 'createdBy' });
models_1.User.hasMany(models_1.User, { foreignKey: 'updatedBy' });
models_1.User.belongsTo(models_1.User, { foreignKey: 'updatedBy' });
models_1.User.hasMany(models_1.Content, { foreignKey: 'createdBy' });
models_1.Content.belongsTo(models_1.User, { foreignKey: 'createdBy' });
models_1.User.hasMany(models_1.Content, { foreignKey: 'updatedBy' });
models_1.Content.belongsTo(models_1.User, { foreignKey: 'updatedBy' });
models_1.User.hasMany(models_1.ContentReport, { foreignKey: 'createdBy' });
models_1.ContentReport.belongsTo(models_1.User, { foreignKey: 'createdBy' });
models_1.User.hasMany(models_1.ContentReport, { foreignKey: 'updatedBy' });
models_1.ContentReport.belongsTo(models_1.User, { foreignKey: 'updatedBy' });
models_1.User.hasMany(models_1.Report, { foreignKey: 'createdBy' });
models_1.Report.belongsTo(models_1.User, { foreignKey: 'createdBy' });
models_1.User.hasMany(models_1.Report, { foreignKey: 'updatedBy' });
models_1.Report.belongsTo(models_1.User, { foreignKey: 'updatedBy' });
models_1.User.hasMany(models_1.Watches, { foreignKey: 'createdBy' });
models_1.Watches.belongsTo(models_1.User, { foreignKey: 'createdBy' });
models_1.User.hasMany(models_1.Watches, { foreignKey: 'updatedBy' });
models_1.Watches.belongsTo(models_1.User, { foreignKey: 'updatedBy' });
//# sourceMappingURL=index.js.map